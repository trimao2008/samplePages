{"ast":null,"code":"import { LaunchDarkly } from \"./LaunchDarkly\";\nconst baseUrl = 'https://app.launchdarkly.com';\nconst fetchAllFlagUrl = `${baseUrl}/api/v2/flags/`;\nfunction checkStatus(response) {\n  if (response.ok) {\n    return response;\n  } else {\n    const httpErrorInfo = {\n      status: response.status,\n      statusText: response.statusText,\n      url: response.url\n    };\n    console.log(`log server http error: ${JSON.stringify(httpErrorInfo)}`);\n    let errorMessage = translateStatusToErrorMessage(httpErrorInfo.status);\n    throw new Error(errorMessage);\n  }\n}\nfunction parseJSON(response) {\n  return response.json();\n}\nfunction convertToLaunchDarklyModel(item) {\n  return new LaunchDarkly(item);\n}\nconst LaunchDarklyApi = {\n  get(projectKey = 'default', env = 'test') {\n    return fetch(`${fetchAllFlagUrl}${projectKey}?filter=filterEnv:${env}`).then(checkStatus).then(parseJSON).then(convertToLaunchDarklyModel).catch(error => {\n      console.log('log client error ' + error);\n      throw new Error('There was an error retrieving the projects. Please try again.');\n    });\n  }\n};\nexport { LaunchDarklyApi };","map":{"version":3,"names":["LaunchDarkly","baseUrl","fetchAllFlagUrl","checkStatus","response","ok","httpErrorInfo","status","statusText","url","console","log","JSON","stringify","errorMessage","translateStatusToErrorMessage","Error","parseJSON","json","convertToLaunchDarklyModel","item","LaunchDarklyApi","get","projectKey","env","fetch","then","catch","error"],"sources":["/Users/trimao/Documents/samplePages/src/launchdarkly/LaunchDarklyApi.ts"],"sourcesContent":["import { error } from \"console\";\nimport { LaunchDarkly } from \"./LaunchDarkly\";\n\nconst baseUrl = 'https://app.launchdarkly.com';\nconst fetchAllFlagUrl = `${baseUrl}/api/v2/flags/`;\n\nfunction checkStatus(response: any) {\n    if (response.ok) {\n        return response;\n    } else {\n        const httpErrorInfo = {\n            status: response.status,\n            statusText: response.statusText,\n            url: response.url,\n        };\n        console.log(`log server http error: ${JSON.stringify(httpErrorInfo)}`);\n        let errorMessage = translateStatusToErrorMessage(httpErrorInfo.status);\n        throw new Error(errorMessage);\n    }\n}\n\nfunction parseJSON(response: Response) {\n    return response.json();\n}\n\nfunction convertToLaunchDarklyModel(item: any): LaunchDarkly {\n    return new LaunchDarkly(item);\n}\n\nconst LaunchDarklyApi = {\n    get(projectKey = 'default', env = 'test') {\n        return fetch(`${fetchAllFlagUrl}${projectKey}?filter=filterEnv:${env}`)\n            .then(checkStatus)\n            .then(parseJSON)\n            .then(convertToLaunchDarklyModel)\n            .catch((error: TypeError) => {\n                console.log('log client error ' + error);\n                throw new Error(\n                    'There was an error retrieving the projects. Please try again.'\n                );\n            });\n    }\n}\n\nexport { LaunchDarklyApi }"],"mappings":"AACA,SAASA,YAAY,QAAQ,gBAAgB;AAE7C,MAAMC,OAAO,GAAG,8BAA8B;AAC9C,MAAMC,eAAe,GAAI,GAAED,OAAQ,gBAAe;AAElD,SAASE,WAAWA,CAACC,QAAa,EAAE;EAChC,IAAIA,QAAQ,CAACC,EAAE,EAAE;IACb,OAAOD,QAAQ;EACnB,CAAC,MAAM;IACH,MAAME,aAAa,GAAG;MAClBC,MAAM,EAAEH,QAAQ,CAACG,MAAM;MACvBC,UAAU,EAAEJ,QAAQ,CAACI,UAAU;MAC/BC,GAAG,EAAEL,QAAQ,CAACK;IAClB,CAAC;IACDC,OAAO,CAACC,GAAG,CAAE,0BAAyBC,IAAI,CAACC,SAAS,CAACP,aAAa,CAAE,EAAC,CAAC;IACtE,IAAIQ,YAAY,GAAGC,6BAA6B,CAACT,aAAa,CAACC,MAAM,CAAC;IACtE,MAAM,IAAIS,KAAK,CAACF,YAAY,CAAC;EACjC;AACJ;AAEA,SAASG,SAASA,CAACb,QAAkB,EAAE;EACnC,OAAOA,QAAQ,CAACc,IAAI,CAAC,CAAC;AAC1B;AAEA,SAASC,0BAA0BA,CAACC,IAAS,EAAgB;EACzD,OAAO,IAAIpB,YAAY,CAACoB,IAAI,CAAC;AACjC;AAEA,MAAMC,eAAe,GAAG;EACpBC,GAAGA,CAACC,UAAU,GAAG,SAAS,EAAEC,GAAG,GAAG,MAAM,EAAE;IACtC,OAAOC,KAAK,CAAE,GAAEvB,eAAgB,GAAEqB,UAAW,qBAAoBC,GAAI,EAAC,CAAC,CAClEE,IAAI,CAACvB,WAAW,CAAC,CACjBuB,IAAI,CAACT,SAAS,CAAC,CACfS,IAAI,CAACP,0BAA0B,CAAC,CAChCQ,KAAK,CAAEC,KAAgB,IAAK;MACzBlB,OAAO,CAACC,GAAG,CAAC,mBAAmB,GAAGiB,KAAK,CAAC;MACxC,MAAM,IAAIZ,KAAK,CACX,+DACJ,CAAC;IACL,CAAC,CAAC;EACV;AACJ,CAAC;AAED,SAASK,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}